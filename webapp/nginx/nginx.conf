load_module modules/ngx_otel_module.so;

user nginx;
worker_processes auto;

pid /var/run/nginx.pid;

error_log  /var/log/nginx/_error.log notice;
# error_log /dev/null crit;

worker_rlimit_nofile 16384;
events {
    worker_connections 4096;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    access_log /var/log/nginx/_access.log main;
    # access_log off;

    # ファイルのメタデータのキャッシュ
    # inactive=60s がデフォルト
    open_file_cache max=2000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

    client_body_buffer_size 16k;
    client_max_body_size 10m;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 16k;

    # sendfile (2) でファイルを返却
    # 動かないこともある
    sendfile on;
    # sendfile が有効の場合のみ
    # sending the response header and the beginning of a file in one packet
    tcp_nopush on;
    tcp_nodelay on;

    # 非同期 I/O
    # デフォルトのスレッドプールは十分大きい
    aio threads;

    proxy_cache_path /var/cache/nginx keys_zone=CACHE:10m max_size=1g inactive=1d use_temp_path=off;

    proxy_request_buffering on;
    proxy_buffer_size 8k;

    keepalive_timeout 65;
    keepalive_requests 1000;  # default

    gzip on;
    gzip_types text/css application/javascript application/json application/font-woff application/font-ttf application/octet-stream;
    # Content-Length で判断
    gzip_min_length 1024;
    # 無効化する UA
    gzip_disable "msie6";
    # 1-9 (default: 1)
    gzip_comp_level 2;
    # 圧縮済みのファイルがあればそれを返す
    gzip_static off;
    # 前段にキャッシュサーバーがあれば on
    # default: off
    gzip_vary off;

    ssl_protocols TLSv1.2 TLSv1.3;
    # TLS 1.2 用の設定
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305;
    # TLS 1.3 用の設定
    ssl_conf_command Ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256;
    # サーバー側の暗号スイート優先
    ssl_prefer_server_ciphers on;
    # 楕円曲線の最適化
    ssl_ecdh_curve X25519:secp384r1;
    # バッファサイズの最適化
    ssl_buffer_size 4k;
    ssl_session_cache shared:SSL:50m;
    # 0-RTT (早期データ) の有効化 (TLS 1.3)
    ssl_early_data off;
    ssl_session_timeout 1h;
    # TLS Session の再開
    ssl_session_tickets on;

    # OCSP Stapling の検証を有効化 (サーバーが証明書の状態を取得)
    # NOTE: うまくいかないのであきらめた
    ssl_stapling off;
    ssl_stapling_verify off;
    # verify が on で, ssl_certificate に中間証明書が含まれない場合に必要
    # エラーになったら見直すべき
    # ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;

    resolver 1.1.1.1 1.0.0.1 valid=300s;
    resolver_timeout 5s;

    otel_exporter {
        endpoint otel-collector-agent:4317;
    }
    otel_service_name da-nginx;
    otel_trace on;
    otel_trace_context propagate;
    otel_span_name $request_uri;

    # metrics 収集用
    server {
        listen 8888;

        location = /status {
            stub_status on;
            access_log off;
            otel_trace off;
        }
    }

    upstream frontend {
        server frontend:3000;
        keepalive 64;
    }

    upstream backend {
        server backend:8080;
        keepalive 64;
    }

    upstream jaeger {
        server jaeger:16686;
    }

    server {
        listen 443 ssl;
        http2 on;
        http2_max_concurrent_streams 256;

        ssl_certificate /da/tls/fullchain.pem;
        ssl_certificate_key /da/tls/privkey.pem;

        location /jaeger/ {
            otel_trace off;
            access_log off;

            proxy_pass         http://jaeger;
            proxy_set_header   Host $host;
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Proto $scheme;
        }

        location / {
            otel_trace off;

            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }

        location /api/ {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }

        location /_protected/images/ {
            internal;
            alias /app/images/;
            autoindex off;

            # キャッシュを無効化すれば画像の取得が毎回行われるので、レギュレーションに違反しない
            add_header Cache-Control "no-store, no-cache, must-revalidate, s-maxage=0" always;
        }
    }

    server {
        listen 80;
        return 301 https://$host$request_uri;
    }
}
